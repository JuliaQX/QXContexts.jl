var documenterSearchIndex = {"docs":
[{"location":"license/","page":"LICENSE","title":"LICENSE","text":"MIT License","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Copyright (c) 2021 QuantEx team","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","category":"page"},{"location":"license/","page":"LICENSE","title":"LICENSE","text":"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = QXContexts","category":"page"},{"location":"#QXContexts","page":"Home","title":"QXContexts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QXContexts is a Julia package for simulating quantum circuits using tensor networking approaches targeting large distributed memory clusters with hardware accelerators. It was developed as part of the QuantEx project, one of the individual software projects of WP8 of PRACE 6IP.","category":"page"},{"location":"","page":"Home","title":"Home","text":"QXContexts is one of a family of packages each with a different aim. QXContexts is the package that is designed to the do the bulk of the computations and makes use of distributed compute resources via MPI.jl as well as hardware accelerators. OMEinsum.jl and TensorOperations.jl are currently used to carry out the tensor contraction operations.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QXContexts is a Julia package and can be installed using Julia's inbuilt package manager from the Julia REPL using.","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(\"QXContexts\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or directly from the github repository with","category":"page"},{"location":"","page":"Home","title":"Home","text":"import Pkg\nPkg.add(url=\"https://github.com/JuliaQX/QXContexts.jl\")","category":"page"},{"location":"#Example-usage","page":"Home","title":"Example usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"QXContexts uses input files generated by QXSim which describe the computation to be performed. An example of the input files for a five qubit GHZ circuit are provided in the examples/ghz folder. This example can be run directly using the examples/ghz_example.jl script or this can be run using the CLI bin/qxrun.jl script with the following command","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -i examples/ghz/ghz_5.jld2 -p examples/ghz/ghz_5.yml -o examples/ghz/out.jld2","category":"page"},{"location":"","page":"Home","title":"Home","text":"where the -d, -i and -p switches describe the DSL file, input data file and parameter file to use respectively. The -o switch refers to the output file. If all three files have the same prefix, then it is only necessary to provide the name of the dsl file so the example could also be run with the command","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2","category":"page"},{"location":"","page":"Home","title":"Home","text":"The output is written to a JLD2 file. A small utility script called examine_output.jl is provided that allows examination of this output which can be used as","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project bin/examing_output.jl examples/ghz/out.jld2","category":"page"},{"location":"#Enable-timing","page":"Home","title":"Enable timing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To get timing information on the different sections of the code the code has been instrumented with TimerOutputs.jl. To enable this one can set the QXRUN_TIMER variable to 1. For example","category":"page"},{"location":"","page":"Home","title":"Home","text":"QXRUN_TIMER=1 julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2","category":"page"},{"location":"#Enable-debugging","page":"Home","title":"Enable debugging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To get detailed debugging information one can include the package name in the JULIA_DEBUG environment variable. For example","category":"page"},{"location":"","page":"Home","title":"Home","text":"JULIA_DEBUG=QXContexts julia --project bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2","category":"page"},{"location":"","page":"Home","title":"Home","text":"This generates very verbose output so care should be taking when using this for large runs.","category":"page"},{"location":"#Enable-logging","page":"Home","title":"Enable logging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To log debug and and performance information to files QXContexts has 3 logger-models:","category":"page"},{"location":"","page":"Home","title":"Home","text":"QXLogger: the default stdout logger: useful for single node, single process logging (interactive)\nQXLoggerMPIShared: an MPI-IO shared-file logger: all MPI ranks share a single file for writing their respective logs; blocking.\nQXLoggerMPIPerRank: MPI-enabled file per rank logger: non-blocking debug files created per MPI rank.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The loggers can be (individually) instantiated by selecting the global logger to use with one of the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"global_logger(QXContexts.Logger.QXLogger())\nglobal_logger(QXContexts.Logger.QXLoggerMPIShared())\nglobal_logger(QXContexts.Logger.QXLoggerMPIPerRank())","category":"page"},{"location":"#Running-with-MPI","page":"Home","title":"Running with MPI","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MPI is used to use multiple processes for computation. The mpiexecjl script can be used to launch Julia on multiple processes. See MPI.jl documentation for details on how to set this up. For example to run the above example with 4 processes one would use the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mpiexecjl --project -n 4 julia bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2","category":"page"},{"location":"","page":"Home","title":"Home","text":"In this case the amplitudes that are to be calculated are split between the processes. For larger cases where many partitions are used for each amplitude it can be useful to split this calculation over many processes also. The --sub-communicator-size (or -m) option can be used to specify the size of sub-communicators to use for each amplitude. For example","category":"page"},{"location":"","page":"Home","title":"Home","text":"mpiexecjl --project -n 4 julia bin/qxrun.jl -d examples/ghz/ghz_5.qx -o examples/ghz/out.jld2 -m 2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here the four processes are split between two communicators, each with two processes.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions from users are welcome and we encourage users to open issues and submit merge/pull requests for any problems or feature requests they have. The CONTRIBUTING.md on the top level of the source folder has further details of the contribution guidelines.","category":"page"}]
}
